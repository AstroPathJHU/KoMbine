name: CI/CD Pipeline
on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - '**'
  pull_request:

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: pip install
        run: |
          pip install . ipykernel jupytext lifelines nbconvert pyflakes pylance pylint texoutparse &&
          rm -r build

      - name: pyflakes
        run: |
          python -m pyflakes .

      - name: pylint
        run: |
          python -m pylint .

      - name: convert notebooks
        run: |
          jupytext --sync docs/roc_picker/*.md docs/kombine/*.md

      - uses: jakebailey/pyright-action@v2.3.2
        with:
          version: 1.1.400

  test-roc-picker:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: pip install
        run: |
          pip install . ipykernel jupytext lifelines nbconvert pyflakes pylint texoutparse &&
          rm -r build

      - name: test ROC Picker code in README
        run: |
          # Extract the ROC Picker example from README and test it
          startlinenumber="$(grep -n "from roc_picker.discrete import DiscreteROC" README.md | sed "s/:.*//")"
          endlinenumber="$(sed -n "${startlinenumber},1000p" README.md | grep -n '```' | head -1 | sed "s/:.*//")"
          endlinenumber="$(expr "$startlinenumber" + "$endlinenumber" - 2)"
          sed -n "${startlinenumber},${endlinenumber}p" README.md | python

      - name: discrete unit test
        run: |
          python -m test.roc_picker.test_discrete

      - name: systematics MC unit test
        run: |
          python -m test.roc_picker.test_systematics_mc

      - name: convert ROC Picker notebooks
        run: |
          jupytext --sync docs/roc_picker/*.md

      - name: test ROC Picker notebooks
        run: |
          jupyter nbconvert --execute --to html -- docs/roc_picker/*.ipynb

      - name: Compile ROC plots
        run: |
          ./docs/roc_picker/compile_roc_plots.sh

      - name: Compile ROC Picker docs
        uses: xu-cheng/latex-action@v3
        with:
          working_directory: docs/roc_picker
          root_file: 02_rocpicker.tex
          latexmk_use_xelatex: true

      - uses: actions/upload-artifact@v4.3.3
        with:
          name: roc_picker_docs
          path: |
            docs/roc_picker/02_rocpicker.pdf
            docs/roc_picker/*.html

  test-kombine:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: pip install
        run: |
          pip install . ipykernel jupytext lifelines nbconvert pyflakes pylint texoutparse &&
          rm -r build

      - name: Install Gurobi
        run: |
          wget https://packages.gurobi.com/10.0/gurobi10.0.3_linux64.tar.gz
          tar -xvzf gurobi10.0.3_linux64.tar.gz
          echo "export GUROBI_HOME=$PWD/gurobi1003/linux64" >> $GITHUB_ENV
          echo "$PWD/gurobi1003/linux64/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=$PWD/gurobi1003/linux64/lib" >> $GITHUB_ENV
          cd gurobi1003/linux64
          python setup.py install
          cd ../..

      - name: Configure Gurobi WLS license
        run: |
          cat <<EOF > ~/gurobi.lic
          WLSACCESSID=${{ secrets.GUROBI_WLSACCESSID }}
          WLSSECRET=${{ secrets.GUROBI_WLSSECRET }}
          LICENSEID=${{ secrets.GUROBI_LICENSEID }}
          EOF

      - name: test KoMbine code in README
        run: |
          # Extract and modify the KoMbine example from README and test it
          startlinenumber="$(grep -n "from kombine.datacard import Datacard" README.md | sed "s/:.*//")"
          endlinenumber="$(sed -n "${startlinenumber},1000p" README.md | grep -n '```' | head -1 | sed "s/:.*//")"
          endlinenumber="$(expr "$startlinenumber" + "$endlinenumber" - 2)"
          # Modify the datacard path to work with the test structure and remove plotting
          sed -n "${startlinenumber},${endlinenumber}p" README.md | sed 's|test/kombine/datacards/simple_examples/simple_km_few_deaths.txt|test/kombine/datacards/simple_examples/simple_km_few_deaths.txt|' | sed '/\.plot()/d' | python

      - name: test discrete optimization module
        run: |
          python -m test.kombine.test_discrete_optimization

      - name: KM likelihood unit test
        run: |
          python -m test.kombine.test_km_likelihood

      - name: convert KoMbine notebooks
        run: |
          jupytext --sync docs/kombine/*.md

      - name: test KoMbine notebooks
        run: |
          jupyter nbconvert --execute --to html -- docs/kombine/*.ipynb

      - name: Compile KM plots
        run: |
          ./docs/kombine/compile_km_plots.sh

      - name: Compile KoMbine docs
        uses: xu-cheng/latex-action@v3
        with:
          working_directory: docs/kombine
          root_file: 02_kombine.tex

      - uses: actions/upload-artifact@v4.3.3
        with:
          name: kombine_docs
          path: |
            docs/kombine/02_kombine.pdf
            docs/kombine/*.html

      - name: Check latex log
        run: |
          python .github/workflows/checklog.py docs/kombine/*.log  --ignore-regex "Macro 'volume[+]number' undefined." --ignore-regex 'Underfull \\vbox \(badness (10000|2189)\) has occurred' --ignore-regex 'Option .hyperindex. has already been used' --ignore-regex 'Missing driver name\.'

  build:
    needs: [linting, test-roc-picker, test-kombine]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          pip install build setuptools_scm[toml]

      - name: Build wheel
        run: |
          python -m build --wheel --outdir dist/

      - uses: actions/upload-artifact@v4.3.3
        with:
          name: wheel
          path: dist/

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      id-token: write
    steps:
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: wheel
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-pypi:
    needs: publish-testpypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      id-token: write
    steps:
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: wheel
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
